{
  "openapi": "3.0.1",
  "info": {
    "flavor": "Simple Bakery API",
    "description": "This is a simple bakery API made for the module of Spring boot in the +devs2blu program.",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://simple-bakery-production.up.railway.app",
      "description": "Production server"
    },
    {
      "url": "http://localhost:8080",
      "description": "Local server"
    }
  ],
  "paths": {
    "/bakery": {
      "get": {
        "tags": [
          "bakery"
        ],
        "summary": "Get all bakerys",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BakeryResponseDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "bakery"
        ],
        "summary": "Create a new bakery",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BakeryRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BakeryResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/bread": {
      "get": {
        "tags": [
          "bread"
        ],
        "summary": "Get all breads in pagination",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "flavor"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PageBreadResponseDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "bread"
        ],
        "summary": "Create a new bread",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BreadRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BreadResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/baker": {
      "get": {
        "tags": [
          "baker"
        ],
        "summary": "Get all bakers",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BakerResponseDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "baker"
        ],
        "summary": "Create a new baker",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BakerRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BakerResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/bakery/{id}": {
      "get": {
        "tags": [
          "bakery"
        ],
        "summary": "Get a bakery by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BakeryResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid path parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "bakery"
        ],
        "summary": "Update a bakery by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BakeryRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BakeryResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body/Invalid path parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "bakery"
        ],
        "summary": "Delete a bakery by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid path parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/bread/{id}": {
      "get": {
        "tags": [
          "bread"
        ],
        "summary": "Get a bread by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BreadResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid path parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "bread"
        ],
        "summary": "Update a bread by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BreadRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BreadResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body/Invalid path parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "bread"
        ],
        "summary": "Delete a bread by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid path parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/bread/ifs/{ifs}": {
      "get": {
        "tags": [
          "bread"
        ],
        "summary": "Get a bread by ifs",
        "parameters": [
          {
            "name": "ifs",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BreadResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid path parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/bread/flavor": {
      "get": {
        "tags": [
          "bread"
        ],
        "summary": "Get a bread by flavor",
        "parameters": [
          {
            "name": "flavor",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BreadResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid path parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/baker/{id}": {
      "get": {
        "tags": [
          "baker"
        ],
        "summary": "Get a baker by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BakerResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid path parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "baker"
        ],
        "summary": "Update a baker by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BakerRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BakerResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body/Invalid path parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "baker"
        ],
        "summary": "Delete a baker by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid path parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/bakery/{id}/breads": {
      "get": {
        "tags": [
          "bakery"
        ],
        "summary": "Get all breads from a bakery",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BreadResponseDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid path parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/baker/{id}/breads": {
      "get": {
        "tags": [
          "baker"
        ],
        "summary": "Get all breads from an baker",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BreadResponseDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid path parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The error message"
          },
          "status": {
            "type": "string",
            "description": "The http status code"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldErrorDto"
            }
          }
        }
      },
      "FieldErrorDto": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "The field that has the error"
          },
          "message": {
            "type": "string",
            "description": "The error message of the field"
          }
        }
      },
      "BakeryRequestDto": {
        "required": [
          "name",
          "phone_number"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string",
            "description": "The address of the bakery",
            "example": "Rua Sete de Setembro, Centro - Blumenau - SC"
          },
          "phone_number": {
            "maxLength": 16,
            "minLength": 9,
            "type": "string"
          }
        }
      },
      "BakeryResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          }
        }
      },
      "BreadRequestDto": {
        "required": [
          "baker",
          "type",
          "ifs",
          "publication_year",
          "bakery",
          "quantity",
          "flavor"
        ],
        "type": "object",
        "properties": {
          "ifs": {
            "maxLength": 13,
            "minLength": 13,
            "type": "string",
            "description": "The IFS of the bread (International Food Standard)"
          },
          "flavor": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
             	"WHITE_BREAD",
				"WHOLE_WHEAT_BREAD",
				"SOURDOUGH_BREAD",
				"RYE_BREAD",
				"FRENCH_BAGUETTE",
				"CIABATTA",
				"PUMPERNICKEL",
				"MULTIGRAIN_BREAD",
				"BRIOCHE",
				"CHALLAH",
				"NAAN",
				"FOCACCIA",
				"CORNBREAD",
				"IRISH_SODA_BREAD",
				"ENGLISH_MUFFIN",
				"BAGEL",
				"PITTA_BREAD",
				"LAVASH",
				"BANANA_BREAD",
				"ZUCCHINI_BREAD",
				"GARLIC_BREAD",
				"CINNAMON_RAISIN_BREAD",
				"RAISIN_BREAD",
				"ROLLS",
				"PRETZEL_BREAD",
				"HAWAIIAN_SWEET_BREAD",
				"MARBLE_RYE",
				"JALAPEÑO_CHEDDAR_BREAD",
				"OLIVE_BREAD",
				"PITA_BREAD"
            ]
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "description": "The quantity of copies of the bread"
          },
          "baker": {
            "type": "string",
            "format": "uuid",
            "description": "The baker id"
          },
          "bakery": {
            "type": "string",
            "format": "uuid",
            "description": "The bakery id"
          },
          "publication_year": {
            "type": "integer",
            "format": "int32",
            "example": 2003,
            "description": "The year when the bread was published"
          }
        }
      },
      "BreadResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "ifs": {
            "type": "string",
            "description": "The IFS of the bread (International Food Standard)"
          },
          "flavor": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "description": "The quantity of copies of the bread"
          },
          "publication_year": {
            "type": "integer",
            "format": "int32",
            "example": 2003,
            "description": "The year when the bread was published"
          },
          "baker_id": {
            "type": "string",
            "format": "uuid"
          },
          "bakery_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "BakerRequestDto": {
        "required": [
          "birth_date",
          "name",
          "nationality"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 2,
            "type": "string"
          },
          "nationality": {
            "maxLength": 50,
            "minLength": 2,
            "type": "string"
          },
          "birth_date": {
            "type": "string",
            "format": "date",
            "example": "27/11/2003"
          }
        }
      },
      "BakerResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "nationality": {
            "type": "string"
          },
          "birth_date": {
            "type": "string",
            "format": "date",
            "example": "27/11/2003"
          }
        }
      },
      "PageBreadResponseDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BreadResponseDto"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PageableObject": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "paged": {
            "type": "boolean"
          },
          "unpaged": {
            "type": "boolean"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SortObject": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean"
          },
          "unsorted": {
            "type": "boolean"
          },
          "sorted": {
            "type": "boolean"
          }
        }
      }
    }
  }
}